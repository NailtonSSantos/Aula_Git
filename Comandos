Acessa a Pasta

- git init = INICIA UM NOVO REPOSITÓRIO GIT
- git status = MOSTRA A SITUAÇÃO DA PASTA
- git add "documento" = ADICIONA O ARQUIVO DE NOME DOCUMENTO NO REPOSITÓRIO GIT LOCAL
- git add . = ADICIONA TODOS OS ARQUIVOS NOVOS E ALTERADOS NO REPOSITÓRIO LOCAL
- git commit -m "Commit Inicial" = COMMIT A VERSÃO DE ARQUIVOS, CADA COMMIT É UMA VERSÃO | -m SIGNIFICA MENSAGEM, ESTA FICA ENTRE ASPAS
CASO SEJA O PRIMEIRO COMMIT, ELE PEDE OS DADOS DE USUÁRIO
- git config --global user.email "nltsilva8@gmail.com"
- git config --global user.name "nailtonssantos"

ESSES SÃO OS MESMOS DADOS DO GITHUB

- git push = EMPURRA AS ALTERAÇÕES, SOBE PARA A NUVEM, O GITHUB
NESSE CASO DA ERRO, PORQUE EU NÃO DEFINI PRA ONDE ELE DÁ O PUSH
CRIEI/ESCOLHI A PASTA NO GITHUB, COPIO O LINK DELA
- git push add origin https://github.com/NailtonSSantos/Aula_Git
GIT ADD DEFINE A PASTA DO GIT ONDE SERÁ FEITO O PUSH
FEITO ISSO, RETORNARÁ UM ERRO, POIS NÃO FOI DEFINIDA A BRANCH (RAMIFICAÇÃO)
- git push --set_upstream origin master
- git reflog = HISTÓRICO DE VERSÕES
A MAIS NOVA NO TOPO, E CADA VERSÃO TEM UM ID
- git reset --hard ID_DA_VERSÃO
POSSO VOLTAR PRA UMA VERSÃO MAIS ANTIGA OU UMA MAIS ATUAL

- git branch = MOSTRA AS BRANCHs DISPONÍVEIS
- git branch development = CRIA UMA BRANCH CHAMADA development
A BRANCH QUE ESTÁ SENDO USADA NO MOMENTO POSSUI UM * NA FRENTE E FICA VERDE
- git checkout development = MUDA A BRANCH EM USO

PARA BUSCAR OS CÓDIGOS DE OUTRAS BRANCHES PARA A PRINCIPAL, PRIMEIRO MUDA A BRANCH EM USO, E VOLTA PRA PRINCIPAL
- git checkout master
- git merge (Branch onde eu estava fazendo as alterações)
EXEMPLO: git merge development = BUSCA TODAS AS ALTERAÇÕES E ADIÇÕES DA BRANCH development

ANTES DE FAZER O MERGE, ENTRAR NA BRANCH BRINCIPAL E FAZER UM git pull, PARA BUSCAR ATUALIZAÇÕES DO SERVIDOR REMOTO DO GIT "UM COLEGA PODE TER ALTERADO ALGO"

-git pull

PARA CRIAR UMA NOVA BRENCH, BASEADA EM UMA JÁ EXISTENTE
git checkout -b "Nome_da_Brench_Nova Nome_da_Brench_Base




